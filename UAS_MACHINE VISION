{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN14A9uerf+WR/mhmyp9QmF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GresyaNababan4212111050/UAS_4212111050_GRESYA/blob/main/UAS_MACHINE%20VISION\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6rPiMv3OiXO5",
        "outputId": "8ae05732-42ea-4af5-af98-42e356db04e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9527777777777777\n",
            "Confusion Matrix:\n",
            " [[33  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 28  0  0  0  0  0  0  0  0]\n",
            " [ 0  0 32  0  0  0  0  0  1  0]\n",
            " [ 0  0  1 30  0  1  0  0  0  2]\n",
            " [ 0  0  0  0 45  0  0  0  0  1]\n",
            " [ 0  0  0  0  0 45  1  0  0  1]\n",
            " [ 0  0  0  0  0  0 35  0  0  0]\n",
            " [ 0  0  0  0  1  0  0 33  0  0]\n",
            " [ 0  3  0  0  1  0  0  0 26  0]\n",
            " [ 0  0  0  1  0  2  0  0  1 36]]\n",
            "Precision: 0.9532875617041853\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, precision_score\n",
        "from skimage.feature import hog\n",
        "from skimage import exposure\n",
        "\n",
        "# Load dataset MNISTmi\n",
        "digits = datasets.load_digits()\n",
        "\n",
        "# HOG Feature Extraction\n",
        "def extract_hog_features(images):\n",
        "    features = []\n",
        "    for image in images:\n",
        "        fd, hog_image = hog(image.reshape((8, 8)), orientations=8, pixels_per_cell=(2, 2), cells_per_block=(1, 1), visualize=True)\n",
        "        features.append(fd)\n",
        "    return np.array(features)\n",
        "\n",
        "# Split dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, test_size=0.2, random_state=42)\n",
        "\n",
        "# Feature extraction using HOG\n",
        "X_train_hog = extract_hog_features(X_train)\n",
        "X_test_hog = extract_hog_features(X_test)\n",
        "\n",
        "# Standardize features\n",
        "scaler = StandardScaler().fit(X_train_hog)\n",
        "X_train_hog = scaler.transform(X_train_hog)\n",
        "X_test_hog = scaler.transform(X_test_hog)\n",
        "\n",
        "# Train SVM\n",
        "svm_model = SVC(kernel='linear', C=1)\n",
        "svm_model.fit(X_train_hog, y_train)\n",
        "# Predict\n",
        "y_pred = svm_model.predict(X_test_hog)\n",
        "\n",
        "# Evaluate performance\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "precision = precision_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "# Display results\n",
        "print(\"Accuracy:\", accuracy)\n",
        "print(\"Confusion Matrix:\\n\", conf_matrix)\n",
        "print(\"Precision:\", precision)"
      ]
    }
  ]
}